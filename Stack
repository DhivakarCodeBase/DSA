===Stack== 

Vaild  the parantheses

import java.util.Stack;

public class Main {
    public static void main(String[] args) {
        String d="({[]})";
        int a=1;
        Stack<Character> bracket = new Stack<>();
        for(int i=0;i<d.length();i++){
            if(d.charAt(i)=='('||d.charAt(i)=='{'||d.charAt(i)=='['){
                bracket.push(d.charAt(i));
            }

        else{
            if(!bracket.isEmpty() && ((bracket.peek()=='(' ||d.charAt(i)==')')||
                    (bracket.peek()=='{' && d.charAt(i)=='}') ||
                            (bracket.peek()=='[' && d.charAt(i)==']')))
                    {
                        bracket.pop();

            }
            else{
                a=2;
            }
        }
    }
        System.out.print(a);
    }
}


=============================================================================================================================================================================
https://www.geeksforgeeks.org/length-longest-balanced-parentheses-prefix/?ref=lbp

import java.util.Stack;

public class Main {
    public static void main(String[] args) {
        String d="((((())))";
        int sum=0;
        int openCount=0;
        int max=0;
        for(int i=0;i<d.length();i++){
            if(d.charAt(i)=='(') {
                sum = +1;
                openCount = 1;
            }
            else{
                sum=-1;
                if(openCount>0){
                   max=(i+1);
                }
                else{
                    break;
                }

            }


        }
        System.out.print (max);

    }
}

==================================================================================================================================================================================
https://www.geeksforgeeks.org/postfix-prefix-conversion/

import java.util.Stack;

public class Main {
    public static void main(String[] args) {
       String postFix="ABC/-AK/L-*";
       Stack <String> fix = new Stack<>();
       for(int i=0;i<postFix.length();i++){
           if(isOperator(postFix.charAt(i))){
               String op1=fix.peek();
               fix.pop();
               String op2=fix.peek();
               fix.pop();

               String temp=postFix.charAt(i)+op2+op1;
               fix.push(temp);


           }
           else{
               fix.push(postFix.charAt(i)+"");

           }
       }
       for(String i:fix){
           System.out.print(i);;
       }

       }
       public static boolean isOperator(char x){
        switch (x){
               case '+':
               case '-':
               case '*':
               case'/':
                   return true;
           }
           return false;
       }
}
=============================================================================================================================================

https://www.geeksforgeeks.org/reverse-an-array-using-stack/

import java.util.Stack;

public class Main {
    public static void main(String[] args) {
       int[] arr={1,2,3,4};
       Stack <Integer> s= new Stack<>();
       for(int i=0;i<arr.length;i++){
           s.push(arr[i]);
       }
       int  n=s.size();
       for(int i=0;i<n;i++){
           int top=s.peek();
           s.pop();
           arr[i]=top;

       }
       for (int i:arr){
           System.out.print(i);
       }
       }
}
